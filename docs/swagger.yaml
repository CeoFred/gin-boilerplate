basePath: /api/v1
definitions:
  handlers.AuthenticateUser:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.ErrorResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.ForgotPasswordInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.InputCreateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  handlers.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.LoginResponseData'
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.LoginResponseData:
    properties:
      jwt:
        type: string
    type: object
  handlers.OtpVerifyInput:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  handlers.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.RegisterResponseData'
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.RegisterResponseData:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  handlers.ResetPasswordInput:
    properties:
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - password
    - passwordConfirm
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: integer
      success:
        type: boolean
    type: object
  handlers.UpdateUserProfileInput:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  models.AccountRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRole
    - AdminRole
  models.User:
    properties:
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      ip:
        type: string
      last_login:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/models.AccountRole'
      status:
        type: string
      updated_at:
        type: string
    required:
    - email_verified
    - first_name
    - id
    - last_name
    - role
    type: object
host: https://example.com
info:
  contact:
    email: fiber@swagger.io
    name: Johnson Awah Alfred
  description: Swagger API documentation for Gin Boilerplare API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gin Boilerplare
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends the reset OTP to the user's email address
      parameters:
      - description: Input (email)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns ''success'' '
          schema:
            type: string
        "400":
          description: Returns error message
          schema:
            type: string
      summary: Sends reset OTP
      tags:
      - Authentication
  /auth/forgot-password/verify/:
    post:
      consumes:
      - application/json
      description: Verifies the user's email address
      parameters:
      - description: Input (token and email)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.OtpVerifyInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns ''success and JWT'' '
          schema:
            type: string
        "400":
          description: Returns error message
          schema:
            type: string
      summary: Verify email address
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user by validating their email and password.
      parameters:
      - description: User credentials (email and password)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthenticateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate User
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User data to create an account
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.InputCreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/reset-password/confirm/{reset-token}:
    post:
      consumes:
      - application/json
      description: Reset the user's password using a JWT token and new credentials.
      parameters:
      - description: JWT token for resetting the password
        in: path
        name: reset-token
        required: true
        type: string
      - description: New password and password confirmation
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Password reset'
          schema:
            type: string
        "400":
          description: 'Error: Invalid input or token'
          schema:
            type: string
      summary: Reset the user's password
      tags:
      - Authentication
  /auth/verify/{email}/{otp}:
    get:
      consumes:
      - application/json
      description: Verifies the user's email address
      parameters:
      - description: User's email address
        in: path
        name: email
        required: true
        type: string
      - description: One-time password (OTP) token
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirects to the client URL with an error code
          schema:
            type: string
      summary: Verify email address
      tags:
      - Authentication
  /user:
    put:
      consumes:
      - application/json
      description: Updates some details about the user
      parameters:
      - description: update user profile
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
swagger: "2.0"
