basePath: /api/v1
definitions:
  handlers.AllEmployeeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.Employee'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.AuthenticateUser:
    properties:
      account_type:
        $ref: '#/definitions/models.AccountType'
      email:
        type: string
      password:
        type: string
    required:
    - account_type
    - email
    - password
    type: object
  handlers.CreatedResponse:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.CustomerListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Customer'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.CustomerResponse:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.DashboardResponse:
    properties:
      available_payouts:
        type: number
      total_balance:
        type: number
      total_sales:
        type: number
    type: object
  handlers.Employee:
    properties:
      department:
        type: string
      email:
        type: string
      employee_id:
        type: string
      external_address:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      organization_id:
        type: string
      photo_url:
        type: string
      status:
        $ref: '#/definitions/models.AccountStatus'
      title:
        type: string
    type: object
  handlers.EmployeeResponse:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.ErrorResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.FinalizeWithdrawalTransaction:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  handlers.ForgotPasswordInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.InputCreateUser:
    properties:
      account_type:
        $ref: '#/definitions/models.AccountType'
      business_industry:
        type: string
      business_name:
        type: string
      business_website:
        type: string
      country:
        type: string
      email:
        type: string
      full_name:
        type: string
      is_software_developer:
        type: boolean
      password:
        type: string
    required:
    - account_type
    - email
    - full_name
    - password
    type: object
  handlers.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.LoginResponseData'
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.LoginResponseData:
    properties:
      jwt:
        type: string
    type: object
  handlers.NewCustomerPayload:
    properties:
      discord_id:
        type: string
      email:
        type: string
      full_address:
        type: string
      full_name:
        type: string
      phone_number:
        type: string
      twitter:
        type: string
    type: object
  handlers.NewEmployeeRequest:
    properties:
      department:
        type: string
      email:
        type: string
      external_address:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - department
    - email
    - external_address
    - first_name
    - last_name
    - title
    type: object
  handlers.NewPayLinkPayload:
    properties:
      banner_url:
        type: string
      blockchain:
        $ref: '#/definitions/models.Blockchain'
      collect_additional_info:
        type: boolean
      collect_customer_email:
        type: boolean
      collect_customer_name:
        type: boolean
      collect_customer_phone_number:
        type: boolean
      collect_customer_twitter:
        type: boolean
      collect_discord_id:
        type: boolean
      currency:
        $ref: '#/definitions/models.Currency'
      description:
        type: string
      free_price:
        type: boolean
      network:
        $ref: '#/definitions/models.Network'
      notification_email:
        type: string
      title:
        type: string
      value:
        type: number
    required:
    - blockchain
    - currency
    - description
    - network
    - notification_email
    - title
    - value
    type: object
  handlers.NewTransactionPayload:
    properties:
      amount:
        type: number
      currency:
        $ref: '#/definitions/models.Currency'
      customer_data:
        $ref: '#/definitions/models.CustomerData'
      entity_id:
        type: string
      intent:
        $ref: '#/definitions/models.TransactionIntent'
      payment_method:
        type: string
      type:
        $ref: '#/definitions/models.TransactionType'
      user_id:
        type: string
    required:
    - amount
    - currency
    - entity_id
    - intent
    - payment_method
    - type
    - user_id
    type: object
  handlers.OtpVerifyInput:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  handlers.PayLinkResponse:
    properties:
      data:
        $ref: '#/definitions/models.PayLink'
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.PayLinksListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PayLink'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.RegisterResponseData'
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.RegisterResponseData:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  handlers.ResetPasswordInput:
    properties:
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - password
    - passwordConfirm
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: integer
      success:
        type: boolean
    type: object
  handlers.TransactionListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.TransactionResponse:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.TransferAssetRequest:
    properties:
      address:
        type: string
      amount:
        type: number
      asset:
        $ref: '#/definitions/models.Currency'
    required:
    - address
    - amount
    - asset
    type: object
  handlers.UpdatePayLinkPayload:
    properties:
      banner_url:
        type: string
      blockchain:
        $ref: '#/definitions/models.Blockchain'
      collect_additional_info:
        type: boolean
      collect_customer_email:
        type: boolean
      collect_customer_name:
        type: boolean
      collect_customer_phone_number:
        type: boolean
      collect_customer_twitter:
        type: boolean
      collect_discord_id:
        type: boolean
      currency:
        $ref: '#/definitions/models.Currency'
      description:
        type: string
      free_price:
        type: boolean
      link_id:
        type: string
      network:
        $ref: '#/definitions/models.Network'
      notification_email:
        type: string
      title:
        type: string
      value:
        type: number
      visibility:
        type: string
    required:
    - blockchain
    - currency
    - description
    - network
    - notification_email
    - title
    - value
    - visibility
    type: object
  handlers.UpdateUserProfileInput:
    properties:
      buisness_name:
        type: string
      company_logo:
        type: string
      company_website:
        type: string
      manager:
        type: string
      phone_number:
        type: string
    required:
    - buisness_name
    - company_logo
    - company_website
    - manager
    - phone_number
    type: object
  handlers.User:
    properties:
      account_verified:
        type: boolean
      business_industry:
        type: string
      business_website:
        type: string
      company_logo_url:
        type: string
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      full_name:
        type: string
      id:
        type: integer
      ip:
        type: string
      is_software_developer:
        type: boolean
      last_login:
        type: string
      phone_number:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      wallet:
        $ref: '#/definitions/models.Wallet'
      wallet_id:
        type: string
    required:
    - email_verified
    - full_name
    - user_id
    type: object
  handlers.WalletMeta:
    properties:
      address:
        type: string
      sol_balance:
        type: integer
      usdc_balance:
        type: integer
      wallet_id:
        type: string
    type: object
  handlers.WalletResponse:
    properties:
      data:
        $ref: '#/definitions/handlers.WalletMeta'
      message:
        type: string
      success:
        type: boolean
    type: object
  models.AccountStatus:
    enum:
    - Active
    - Suspended
    - Inactive
    type: string
    x-enum-varnames:
    - ActiveAccount
    - SuspendedAccount
    - InactiveAccount
  models.AccountType:
    enum:
    - creator
    - business
    - employee
    type: string
    x-enum-varnames:
    - Creator
    - Business
    - EmployeeAccount
  models.Blockchain:
    enum:
    - SOLANA
    type: string
    x-enum-varnames:
    - SOLANA
  models.Currency:
    enum:
    - USDC
    - SOL
    type: string
    x-enum-varnames:
    - USDC
    - SOL
  models.Customer:
    properties:
      address:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      discord_id:
        type: string
      email:
        type: string
      id:
        type: integer
      last_transaction_at:
        type: string
      name:
        type: string
      owner:
        type: string
      phone_number:
        type: string
      twitter:
        type: string
    required:
    - created_at
    - customer_id
    - owner
    type: object
  models.CustomerData:
    properties:
      discord_id:
        type: string
      email:
        type: string
      full_address:
        type: string
      full_name:
        type: string
      phone_number:
        type: string
      twitter:
        type: string
    type: object
  models.Network:
    enum:
    - mainnet-beta
    - devnet
    type: string
    x-enum-varnames:
    - SOLANA_MAINNET
    - SOLANA_DEVNET
  models.PayLink:
    properties:
      access_pin:
        type: string
      banner_url:
        type: string
      blockchain:
        $ref: '#/definitions/models.Blockchain'
      collect_additional_info:
        type: boolean
      collect_customer_email:
        type: boolean
      collect_customer_name:
        type: boolean
      collect_customer_phone_number:
        type: boolean
      collect_customer_twitter:
        type: boolean
      collect_discord_id:
        type: boolean
      created_at:
        type: string
      created_by:
        type: string
      currency:
        $ref: '#/definitions/models.Currency'
      description:
        type: string
      free_price:
        type: boolean
      link_id:
        type: string
      network:
        $ref: '#/definitions/models.Network'
      notification_email:
        type: string
      status:
        $ref: '#/definitions/models.PayLinkStatus'
      title:
        type: string
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      updated_at:
        type: string
      value:
        type: number
      view_count:
        type: integer
      visibility:
        type: string
    required:
    - access_pin
    - banner_url
    - blockchain
    - collect_additional_info
    - collect_customer_email
    - collect_customer_name
    - collect_customer_phone_number
    - collect_customer_twitter
    - collect_discord_id
    - created_at
    - created_by
    - currency
    - description
    - free_price
    - link_id
    - network
    - notification_email
    - status
    - title
    - value
    - view_count
    - visibility
    type: object
  models.PayLinkStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - ActivePayLink
    - InActivePayLink
  models.Transaction:
    properties:
      amount:
        type: number
      blockchain_url:
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      currency:
        $ref: '#/definitions/models.Currency'
      customer:
        $ref: '#/definitions/models.Customer'
      customer_id:
        type: string
      entity_id:
        type: string
      from_address:
        type: string
      intent:
        $ref: '#/definitions/models.TransactionIntent'
      payment_method:
        type: string
      status:
        $ref: '#/definitions/models.TransactionStatus'
      transaction_id:
        type: string
      type:
        $ref: '#/definitions/models.TransactionType'
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - amount
    - created_at
    - currency
    - entity_id
    - intent
    - status
    - transaction_id
    - type
    - updated_at
    - user_id
    type: object
  models.TransactionIntent:
    enum:
    - paylink
    - donation
    type: string
    x-enum-varnames:
    - PayLinkTransaction
    - DonationTransaction
  models.TransactionStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - PendingTransaction
    - CompletedTransaction
    - FailedTransaction
  models.TransactionType:
    enum:
    - debit
    - credit
    type: string
    x-enum-varnames:
    - DebitTransaction
    - CreditTransaction
  models.Wallet:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      pk:
        items:
          type: integer
        type: array
      sol_balance_devnet:
        type: number
      sol_balance_mainnet:
        type: number
      updated_at:
        type: string
      usdc_balance_devnnet:
        type: number
      usdc_balance_mainnet:
        type: number
      wallet_id:
        type: string
    type: object
host: https://api.bonpay.finance
info:
  contact:
    email: fiber@swagger.io
    name: Johnson Awah Alfred
  description: Swagger API documentation for Bonpay Finance API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Bonpay Finance
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends the reset OTP to the user's email address
      parameters:
      - description: Input (email)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns ''success'' '
          schema:
            type: string
        "400":
          description: Returns error message
          schema:
            type: string
      summary: Sends reset OTP
      tags:
      - Authentication
  /auth/forgot-password/verify/:
    post:
      consumes:
      - application/json
      description: Verifies the user's email address
      parameters:
      - description: Input (token and email)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.OtpVerifyInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns ''success and JWT'' '
          schema:
            type: string
        "400":
          description: Returns error message
          schema:
            type: string
      summary: Verify email address
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user by validating their email and password.
      parameters:
      - description: User credentials (email and password)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthenticateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate User
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User data to create an account
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.InputCreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/reset-password/confirm/{reset-token}:
    post:
      consumes:
      - application/json
      description: Reset the user's password using a JWT token and new credentials.
      parameters:
      - description: JWT token for resetting the password
        in: path
        name: reset-token
        required: true
        type: string
      - description: New password and password confirmation
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Password reset'
          schema:
            type: string
        "400":
          description: 'Error: Invalid input or token'
          schema:
            type: string
      summary: Reset the user's password
      tags:
      - Authentication
  /auth/verify/{email}/{otp}:
    get:
      consumes:
      - application/json
      description: Verifies the user's email address
      parameters:
      - description: User's email address
        in: path
        name: email
        required: true
        type: string
      - description: One-time password (OTP) token
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirects to the client URL with an error code
          schema:
            type: string
      summary: Verify email address
      tags:
      - Authentication
  /customer:
    post:
      consumes:
      - application/json
      description: Creates customer with the provided details.
      parameters:
      - description: Customer details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.NewCustomerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create customer
      tags:
      - Customer
  /customers:
    get:
      description: Retrieve the customers of the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of customers
      tags:
      - Customer
  /employee:
    get:
      consumes:
      - application/json
      description: Retrieve all organizations employee
      produces:
      - application/json
      responses:
        "200":
          description: Employee created
          schema:
            $ref: '#/definitions/handlers.AllEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve all organizations employee
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: Create a new employee with the provided information
      parameters:
      - description: Employee information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.NewEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Employee created
          schema:
            $ref: '#/definitions/handlers.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new employee
      tags:
      - Employee
  /employee/accept-invitation/{user_id}/{organization_id}:
    get:
      consumes:
      - application/json
      description: Employees are invited to join an organization, this handler is
        responsible for accepting the invitation.
      produces:
      - application/json
      responses:
        "302":
          description: Found
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Accept organizations invitation
      tags:
      - Employee
  /paylink:
    get:
      consumes:
      - application/json
      description: Retrieves pay links created by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PayLinksListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve user's pay links
      tags:
      - PayLink
    post:
      consumes:
      - application/json
      description: Creates a new pay link with the provided details.
      parameters:
      - description: Pay link details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.NewPayLinkPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new pay link
      tags:
      - PayLink
  /paylink/{link_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single pay link based on the provided link ID.
      parameters:
      - description: Pay link ID
        in: path
        name: link_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PayLinkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Retrieve a single pay link
      tags:
      - PayLink
    put:
      consumes:
      - application/json
      description: Update a single paylink.
      parameters:
      - description: Link ID
        in: path
        name: link_id
        required: true
        type: string
      - description: Updated paylink details
        in: body
        name: validatedRequestBody
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePayLinkPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Paylink
      tags:
      - PayLink
  /paylink/file-upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a banner file for a pay link.
      parameters:
      - description: Banner file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload a banner file
      tags:
      - PayLink
  /paylink/status/{link_id}:
    put:
      description: Updates Paylink Status for a pay link.
      parameters:
      - description: Paylink ID
        in: path
        name: link_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Updates Paylink Status
      tags:
      - PayLink
  /paylink/view-count/{link_id}:
    put:
      consumes:
      - application/json
      description: Increment the pageview count for a paylink.
      parameters:
      - description: Link ID
        in: path
        name: link_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Increment Pageview Count
      tags:
      - PayLink
  /transaction:
    get:
      consumes:
      - application/json
      description: Retrieves transaction created by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TransactionListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve user's transaction
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: Creates transaction with the provided details.
      parameters:
      - description: Pay link details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.NewTransactionPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create transaction
      tags:
      - Transaction
  /transaction/generate-reference:
    get:
      description: Generate a payment reference for solana transactions
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Generated successfully'
          schema:
            type: string
        "400":
          description: 'Error: Failed to generate transaction reference'
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Generate a payment reference for solana transactions
      tags:
      - Transaction
  /transaction/paylinks:
    get:
      consumes:
      - application/json
      description: Retrieves a single pay link based on the provided link ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve pay link transaction
      tags:
      - Transaction
  /transaction/withdrawal/{withdrawal_id}/finalize:
    post:
      consumes:
      - application/json
      description: Finalizes a withdrawal transaction for transferring assets after
        OTP verification.
      parameters:
      - description: Finalize request (OTP)
        in: body
        name: finalizeRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.FinalizeWithdrawalTransaction'
      - description: Withdrawal ID
        in: path
        name: withdrawal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Withdrawal transaction finalized'
          schema:
            type: string
        "400":
          description: 'Error: Failed to finalize withdrawal transaction'
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Finalize a withdrawal transaction
      tags:
      - Transaction
  /transaction/withdrawal/init:
    post:
      consumes:
      - application/json
      description: Initializes a withdrawal transaction for transferring assets.
      parameters:
      - description: Transfer request (Amount, Address, Asset)
        in: body
        name: transferRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.TransferAssetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: '
          schema:
            type: string
        "400":
          description: 'Error: Failed to initialize withdrawal transaction'
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Initialize a withdrawal transaction
      tags:
      - Transaction
  /transactions/completed/{txn_id}:
    put:
      description: Updates the status of a transaction to completed.
      parameters:
      - description: Transaction ID
        in: path
        name: txn_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update Transaction Status to Completed
      tags:
      - Transaction
  /user:
    put:
      consumes:
      - application/json
      description: Updates some details about the user
      parameters:
      - description: update user profile
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
  /user/dashboard:
    get:
      consumes:
      - application/json
      description: Get dashboard statistics for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DashboardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Dashboard Statistics
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
  /wallet:
    get:
      description: Retrieve the wallet of the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user's wallet
      tags:
      - Wallet
  /wallet/address/solana/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the wallet address associated with a user by user ID.
      parameters:
      - description: User ID to retrieve wallet for
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Wallet address retrieved'
          schema:
            $ref: '#/definitions/handlers.WalletResponse'
        "400":
          description: 'Error: Failed to retrieve wallet address'
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Retrieve wallet address for a user
      tags:
      - Wallet
swagger: "2.0"
