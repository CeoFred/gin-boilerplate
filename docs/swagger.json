{
    "swagger": "2.0",
    "info": {
        "description": "Swagger API documentation for Bonpay Finance API",
        "title": "Bonpay Finance",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Johnson Awah Alfred",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "https://api.bonpay.finance",
    "basePath": "/api/v1",
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "Sends the reset OTP to the user's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sends reset OTP",
                "parameters": [
                    {
                        "description": "Input (email)",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ForgotPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns 'success' ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Returns error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password/verify/": {
            "post": {
                "description": "Verifies the user's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email address",
                "parameters": [
                    {
                        "description": "Input (token and email)",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.OtpVerifyInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns 'success and JWT' ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Returns error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user by validating their email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate User",
                "parameters": [
                    {
                        "description": "User credentials (email and password)",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthenticateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User data to create an account",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.InputCreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password/confirm/{reset-token}": {
            "post": {
                "description": "Reset the user's password using a JWT token and new credentials.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset the user's password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for resetting the password",
                        "name": "reset-token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password and password confirmation",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Password reset",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid input or token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/verify/{email}/{otp}": {
            "get": {
                "description": "Verifies the user's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's email address",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "One-time password (OTP) token",
                        "name": "otp",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the client URL with an error code",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/customer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates customer with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Create customer",
                "parameters": [
                    {
                        "description": "Customer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.NewCustomerPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the customers of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get a list of customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CustomerListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employee": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all organizations employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Retrieve all organizations employee",
                "responses": {
                    "200": {
                        "description": "Employee created",
                        "schema": {
                            "$ref": "#/definitions/handlers.AllEmployeeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new employee with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Create a new employee",
                "parameters": [
                    {
                        "description": "Employee information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.NewEmployeeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Employee created",
                        "schema": {
                            "$ref": "#/definitions/handlers.EmployeeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employee/accept-invitation/{user_id}/{organization_id}": {
            "get": {
                "description": "Employees are invited to join an organization, this handler is responsible for accepting the invitation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Accept organizations invitation",
                "responses": {
                    "302": {
                        "description": "Found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/paylink": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves pay links created by the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Retrieve user's pay links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PayLinksListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new pay link with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Create a new pay link",
                "parameters": [
                    {
                        "description": "Pay link details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.NewPayLinkPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/paylink/file-upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a banner file for a pay link.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Upload a banner file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Banner file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/paylink/status/{link_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates Paylink Status for a pay link.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Updates Paylink Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paylink ID",
                        "name": "link_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/paylink/view-count/{link_id}": {
            "put": {
                "description": "Increment the pageview count for a paylink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Increment Pageview Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link ID",
                        "name": "link_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/paylink/{link_id}": {
            "get": {
                "description": "Retrieves a single pay link based on the provided link ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Retrieve a single pay link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pay link ID",
                        "name": "link_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PayLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a single paylink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PayLink"
                ],
                "summary": "Update Paylink",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link ID",
                        "name": "link_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated paylink details",
                        "name": "validatedRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePayLinkPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves transaction created by the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Retrieve user's transaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TransactionListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates transaction with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create transaction",
                "parameters": [
                    {
                        "description": "Pay link details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.NewTransactionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction/generate-reference": {
            "get": {
                "description": "Generate a payment reference for solana transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Generate a payment reference for solana transactions",
                "responses": {
                    "200": {
                        "description": "Success: Generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Failed to generate transaction reference",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction/paylinks": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a single pay link based on the provided link ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Retrieve pay link transaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction/withdrawal/init": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initializes a withdrawal transaction for transferring assets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Initialize a withdrawal transaction",
                "parameters": [
                    {
                        "description": "Transfer request (Amount, Address, Asset)",
                        "name": "transferRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TransferAssetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Failed to initialize withdrawal transaction",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transaction/withdrawal/{withdrawal_id}/finalize": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Finalizes a withdrawal transaction for transferring assets after OTP verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Finalize a withdrawal transaction",
                "parameters": [
                    {
                        "description": "Finalize request (OTP)",
                        "name": "finalizeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.FinalizeWithdrawalTransaction"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Withdrawal ID",
                        "name": "withdrawal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Withdrawal transaction finalized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Failed to finalize withdrawal transaction",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/completed/{txn_id}": {
            "put": {
                "description": "Updates the status of a transaction to completed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Update Transaction Status to Completed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "txn_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates some details about the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "update user profile",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserProfileInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/dashboard": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get dashboard statistics for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Dashboard Statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the wallet of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get a user's wallet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/address/solana/{user_id}": {
            "get": {
                "description": "Retrieves the wallet address associated with a user by user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Retrieve wallet address for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to retrieve wallet for",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Wallet address retrieved",
                        "schema": {
                            "$ref": "#/definitions/handlers.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Failed to retrieve wallet address",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AllEmployeeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.Employee"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.AuthenticateUser": {
            "type": "object",
            "required": [
                "account_type",
                "email",
                "password"
            ],
            "properties": {
                "account_type": {
                    "$ref": "#/definitions/models.AccountType"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.CreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.CustomerListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Customer"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.CustomerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.DashboardResponse": {
            "type": "object",
            "properties": {
                "available_payouts": {
                    "type": "number"
                },
                "total_balance": {
                    "type": "number"
                },
                "total_sales": {
                    "type": "number"
                }
            }
        },
        "handlers.Employee": {
            "type": "object",
            "properties": {
                "department": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "external_address": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.AccountStatus"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.EmployeeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.FinalizeWithdrawalTransaction": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "handlers.ForgotPasswordInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "handlers.InputCreateUser": {
            "type": "object",
            "required": [
                "account_type",
                "email",
                "full_name",
                "password"
            ],
            "properties": {
                "account_type": {
                    "$ref": "#/definitions/models.AccountType"
                },
                "business_industry": {
                    "type": "string"
                },
                "business_name": {
                    "type": "string"
                },
                "business_website": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "is_software_developer": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.LoginResponseData"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.LoginResponseData": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "string"
                }
            }
        },
        "handlers.NewCustomerPayload": {
            "type": "object",
            "properties": {
                "discord_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                }
            }
        },
        "handlers.NewEmployeeRequest": {
            "type": "object",
            "required": [
                "department",
                "email",
                "external_address",
                "first_name",
                "last_name",
                "title"
            ],
            "properties": {
                "department": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "external_address": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.NewPayLinkPayload": {
            "type": "object",
            "required": [
                "blockchain",
                "currency",
                "description",
                "network",
                "notification_email",
                "title",
                "value"
            ],
            "properties": {
                "banner_url": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/models.Blockchain"
                },
                "collect_additional_info": {
                    "type": "boolean"
                },
                "collect_customer_email": {
                    "type": "boolean"
                },
                "collect_customer_name": {
                    "type": "boolean"
                },
                "collect_customer_phone_number": {
                    "type": "boolean"
                },
                "collect_customer_twitter": {
                    "type": "boolean"
                },
                "collect_discord_id": {
                    "type": "boolean"
                },
                "currency": {
                    "$ref": "#/definitions/models.Currency"
                },
                "description": {
                    "type": "string"
                },
                "free_price": {
                    "type": "boolean"
                },
                "network": {
                    "$ref": "#/definitions/models.Network"
                },
                "notification_email": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "handlers.NewTransactionPayload": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "entity_id",
                "intent",
                "payment_method",
                "type",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/models.Currency"
                },
                "customer_data": {
                    "$ref": "#/definitions/models.CustomerData"
                },
                "entity_id": {
                    "type": "string"
                },
                "intent": {
                    "$ref": "#/definitions/models.TransactionIntent"
                },
                "payment_method": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TransactionType"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handlers.OtpVerifyInput": {
            "type": "object",
            "required": [
                "email",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.PayLinkResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.PayLink"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.PayLinksListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PayLink"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.RegisterResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.RegisterResponseData"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.RegisterResponseData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetPasswordInput": {
            "type": "object",
            "required": [
                "password",
                "passwordConfirm"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "passwordConfirm": {
                    "type": "string"
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.TransactionListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.TransactionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.TransferAssetRequest": {
            "type": "object",
            "required": [
                "address",
                "amount",
                "asset"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "asset": {
                    "$ref": "#/definitions/models.Currency"
                }
            }
        },
        "handlers.UpdatePayLinkPayload": {
            "type": "object",
            "required": [
                "blockchain",
                "currency",
                "description",
                "network",
                "notification_email",
                "title",
                "value",
                "visibility"
            ],
            "properties": {
                "banner_url": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/models.Blockchain"
                },
                "collect_additional_info": {
                    "type": "boolean"
                },
                "collect_customer_email": {
                    "type": "boolean"
                },
                "collect_customer_name": {
                    "type": "boolean"
                },
                "collect_customer_phone_number": {
                    "type": "boolean"
                },
                "collect_customer_twitter": {
                    "type": "boolean"
                },
                "collect_discord_id": {
                    "type": "boolean"
                },
                "currency": {
                    "$ref": "#/definitions/models.Currency"
                },
                "description": {
                    "type": "string"
                },
                "free_price": {
                    "type": "boolean"
                },
                "link_id": {
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/models.Network"
                },
                "notification_email": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserProfileInput": {
            "type": "object",
            "required": [
                "buisness_name",
                "company_logo",
                "company_website",
                "manager",
                "phone_number"
            ],
            "properties": {
                "buisness_name": {
                    "type": "string"
                },
                "company_logo": {
                    "type": "string"
                },
                "company_website": {
                    "type": "string"
                },
                "manager": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "handlers.User": {
            "type": "object",
            "required": [
                "email_verified",
                "full_name",
                "user_id"
            ],
            "properties": {
                "account_verified": {
                    "type": "boolean"
                },
                "business_industry": {
                    "type": "string"
                },
                "business_website": {
                    "type": "string"
                },
                "company_logo_url": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "is_software_developer": {
                    "type": "boolean"
                },
                "last_login": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet": {
                    "$ref": "#/definitions/models.Wallet"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handlers.WalletMeta": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "sol_balance": {
                    "type": "integer"
                },
                "usdc_balance": {
                    "type": "integer"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handlers.WalletResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/handlers.WalletMeta"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.AccountStatus": {
            "type": "string",
            "enum": [
                "Active",
                "Suspended",
                "Inactive"
            ],
            "x-enum-varnames": [
                "ActiveAccount",
                "SuspendedAccount",
                "InactiveAccount"
            ]
        },
        "models.AccountType": {
            "type": "string",
            "enum": [
                "creator",
                "business",
                "employee"
            ],
            "x-enum-varnames": [
                "Creator",
                "Business",
                "EmployeeAccount"
            ]
        },
        "models.Blockchain": {
            "type": "string",
            "enum": [
                "SOLANA"
            ],
            "x-enum-varnames": [
                "SOLANA"
            ]
        },
        "models.Currency": {
            "type": "string",
            "enum": [
                "USDC",
                "SOL"
            ],
            "x-enum-varnames": [
                "USDC",
                "SOL"
            ]
        },
        "models.Customer": {
            "type": "object",
            "required": [
                "created_at",
                "customer_id",
                "owner"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "discord_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_transaction_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                }
            }
        },
        "models.CustomerData": {
            "type": "object",
            "properties": {
                "discord_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                }
            }
        },
        "models.Network": {
            "type": "string",
            "enum": [
                "mainnet-beta",
                "devnet"
            ],
            "x-enum-varnames": [
                "SOLANA_MAINNET",
                "SOLANA_DEVNET"
            ]
        },
        "models.PayLink": {
            "type": "object",
            "required": [
                "access_pin",
                "banner_url",
                "blockchain",
                "collect_additional_info",
                "collect_customer_email",
                "collect_customer_name",
                "collect_customer_phone_number",
                "collect_customer_twitter",
                "collect_discord_id",
                "created_at",
                "created_by",
                "currency",
                "description",
                "free_price",
                "link_id",
                "network",
                "notification_email",
                "status",
                "title",
                "value",
                "view_count",
                "visibility"
            ],
            "properties": {
                "access_pin": {
                    "type": "string"
                },
                "banner_url": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/models.Blockchain"
                },
                "collect_additional_info": {
                    "type": "boolean"
                },
                "collect_customer_email": {
                    "type": "boolean"
                },
                "collect_customer_name": {
                    "type": "boolean"
                },
                "collect_customer_phone_number": {
                    "type": "boolean"
                },
                "collect_customer_twitter": {
                    "type": "boolean"
                },
                "collect_discord_id": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "$ref": "#/definitions/models.Currency"
                },
                "description": {
                    "type": "string"
                },
                "free_price": {
                    "type": "boolean"
                },
                "link_id": {
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/models.Network"
                },
                "notification_email": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.PayLinkStatus"
                },
                "title": {
                    "type": "string"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "view_count": {
                    "type": "integer"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "models.PayLinkStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive"
            ],
            "x-enum-varnames": [
                "ActivePayLink",
                "InActivePayLink"
            ]
        },
        "models.Transaction": {
            "type": "object",
            "required": [
                "amount",
                "created_at",
                "currency",
                "entity_id",
                "intent",
                "status",
                "transaction_id",
                "type",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "blockchain_url": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "$ref": "#/definitions/models.Currency"
                },
                "customer": {
                    "$ref": "#/definitions/models.Customer"
                },
                "customer_id": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "from_address": {
                    "type": "string"
                },
                "intent": {
                    "$ref": "#/definitions/models.TransactionIntent"
                },
                "payment_method": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TransactionStatus"
                },
                "transaction_id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TransactionType"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.TransactionIntent": {
            "type": "string",
            "enum": [
                "paylink",
                "donation"
            ],
            "x-enum-varnames": [
                "PayLinkTransaction",
                "DonationTransaction"
            ]
        },
        "models.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "PendingTransaction",
                "CompletedTransaction",
                "FailedTransaction"
            ]
        },
        "models.TransactionType": {
            "type": "string",
            "enum": [
                "debit",
                "credit"
            ],
            "x-enum-varnames": [
                "DebitTransaction",
                "CreditTransaction"
            ]
        },
        "models.Wallet": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "pk": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sol_balance_devnet": {
                    "type": "number"
                },
                "sol_balance_mainnet": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "usdc_balance_devnnet": {
                    "type": "number"
                },
                "usdc_balance_mainnet": {
                    "type": "number"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        }
    }
}